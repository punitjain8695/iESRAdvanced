
VisitorCounter_eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000048a  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  00000496  0000050a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a8  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a0  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000206  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004eb  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cb  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001df  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  8a:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3f e1       	ldi	r19, 0x1F	; 31
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:



void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 ea       	ldi	r22, 0xA0	; 160
 128:	e6 2e       	mov	r14, r22
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_number>:




void lcd_number(unsigned int no)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24

lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;

if (no==0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <lcd_number+0x34>
	lcd_data('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__udivmodhi4>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
	no=no/10;
 17c:	ce 01       	movw	r24, r28
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__udivmodhi4>
 186:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 188:	20 97       	sbiw	r28, 0x00	; 0
 18a:	81 f7       	brne	.-32     	; 0x16c <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_num>:



void lcd_num(unsigned int no)
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	8c 01       	movw	r16, r24
lcd_command(0x04);
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;
value=no%10;
lcd_data(48+value);
 1a4:	c8 01       	movw	r24, r16
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
value=no/10;
lcd_data(48+value);
 1b4:	c8 01       	movw	r24, r16
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__udivmodhi4>
 1be:	86 2f       	mov	r24, r22
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>

lcd_command(0x06);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <lcd_string_forward>:

void lcd_string_forward(unsigned char *str)
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	70 ea       	ldi	r23, 0xA0	; 160
 1e2:	e7 2e       	mov	r14, r23
 1e4:	7f e0       	ldi	r23, 0x0F	; 15
 1e6:	f7 2e       	mov	r15, r23
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <lcd_string_forward+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 1ea:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 1ee:	1f 5f       	subi	r17, 0xFF	; 255
 1f0:	c7 01       	movw	r24, r14
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_string_forward+0x20>

void lcd_string_forward(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 1f6:	fe 01       	movw	r30, r28
 1f8:	e1 0f       	add	r30, r17
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	a1 f7       	brne	.-24     	; 0x1ea <lcd_string_forward+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
 20e:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
 210:	e1 99       	sbic	0x1c, 1	; 28
 212:	fe cf       	rjmp	.-4      	; 0x210 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 214:	3f bb       	out	0x1f, r19	; 31
 216:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
 218:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
 21a:	8d b3       	in	r24, 0x1d	; 29
}
 21c:	08 95       	ret

0000021e <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
 21e:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
 220:	e1 99       	sbic	0x1c, 1	; 28
 222:	fe cf       	rjmp	.-4      	; 0x220 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 224:	3f bb       	out	0x1f, r19	; 31
 226:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
 228:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	e2 9a       	sbi	0x1c, 2	; 28
 230:	e1 9a       	sbi	0x1c, 1	; 28
 232:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
 234:	08 95       	ret

00000236 <main>:
#include<avr/lcd.h>
#include<avr/eeprom.h>
int i;

void main()
{
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	2b 97       	sbiw	r28, 0x0b	; 11
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61

char A[11];
DDRC=255;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	84 bb       	out	0x14, r24	; 20
DDRA=0;
 252:	1a ba       	out	0x1a, r1	; 26
lcd_init();
 254:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
lcd_command(0x80);
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
    \note The argument order is mismatch with common functions like strcpy().
 */
static __inline__ void
eeprom_write_block (const void *__src, void *__dst, size_t __n)
{
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
 25e:	2f e0       	ldi	r18, 0x0F	; 15
 260:	31 e0       	ldi	r19, 0x01	; 1
 262:	4b e0       	ldi	r20, 0x0B	; 11
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	60 e6       	ldi	r22, 0x60	; 96
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 c7 01 	call	0x38e	; 0x38e <__eewr_block>
    \a __dst.
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
 272:	27 e0       	ldi	r18, 0x07	; 7
 274:	31 e0       	ldi	r19, 0x01	; 1
 276:	4b e0       	ldi	r20, 0x0B	; 11
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	8e 01       	movw	r16, r28
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
 284:	c8 01       	movw	r24, r16
 286:	0e 94 95 01 	call	0x32a	; 0x32a <__eerd_block>
eeprom_write_block("Sensor In :",0x000,11);
eeprom_read_block(A,0x000,11);
A[11]='\0';
 28a:	1c 86       	std	Y+12, r1	; 0x0c
lcd_string(A);
 28c:	c8 01       	movw	r24, r16
 28e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
 292:	67 e0       	ldi	r22, 0x07	; 7
 294:	71 e0       	ldi	r23, 0x01	; 1
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 b1 01 	call	0x362	; 0x362 <__eerd_word>
i=eeprom_read_word(0x100);
 29e:	90 93 6d 00 	sts	0x006D, r25
 2a2:	80 93 6c 00 	sts	0x006C, r24
lcd_command(0x8f);
 2a6:	8f e8       	ldi	r24, 0x8F	; 143
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(i);
 2ac:	80 91 6c 00 	lds	r24, 0x006C
 2b0:	90 91 6d 00 	lds	r25, 0x006D
 2b4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>

while(1)
{
if((PINA&0x01)==1)
 2b8:	c8 9b       	sbis	0x19, 0	; 25
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <main+0x82>
{
while((PINA&0x01)==1);
 2bc:	c8 99       	sbic	0x19, 0	; 25
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <main+0x86>
i++;
 2c0:	60 91 6c 00 	lds	r22, 0x006C
 2c4:	70 91 6d 00 	lds	r23, 0x006D
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	70 93 6d 00 	sts	0x006D, r23
 2d0:	60 93 6c 00 	sts	0x006C, r22
/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    __eewr_word (__p, __value, eeprom_write_byte);
 2d4:	4f e0       	ldi	r20, 0x0F	; 15
 2d6:	51 e0       	ldi	r21, 0x01	; 1
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__eewr_word>
 2e0:	e2 cf       	rjmp	.-60     	; 0x2a6 <main+0x70>

000002e2 <lcd_string_back>:

void lcd_string_back(unsigned char *str)
{
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
char d=strlen(str)-1;
 2ee:	dc 01       	movw	r26, r24
 2f0:	0d 90       	ld	r0, X+
 2f2:	00 20       	and	r0, r0
 2f4:	e9 f7       	brne	.-6      	; 0x2f0 <lcd_string_back+0xe>
 2f6:	1a 2f       	mov	r17, r26
 2f8:	18 1b       	sub	r17, r24
 2fa:	12 50       	subi	r17, 0x02	; 2
 2fc:	e0 ea       	ldi	r30, 0xA0	; 160
 2fe:	ee 2e       	mov	r14, r30
 300:	ef e0       	ldi	r30, 0x0F	; 15
 302:	fe 2e       	mov	r15, r30
 304:	0a c0       	rjmp	.+20     	; 0x31a <lcd_string_back+0x38>

while(d>0)
{
lcd_data(str[d]);
 306:	fe 01       	movw	r30, r28
 308:	e1 0f       	add	r30, r17
 30a:	f1 1d       	adc	r31, r1
 30c:	80 81       	ld	r24, Z
 30e:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d--;
 312:	11 50       	subi	r17, 0x01	; 1
 314:	c7 01       	movw	r24, r14
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <lcd_string_back+0x34>

void lcd_string_back(unsigned char *str)
{
char d=strlen(str)-1;

while(d>0)
 31a:	11 23       	and	r17, r17
 31c:	a1 f7       	brne	.-24     	; 0x306 <lcd_string_back+0x24>
{
lcd_data(str[d]);
d--;
_delay_ms(1);
}
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	08 95       	ret

0000032a <__eerd_block>:
 32a:	a0 e0       	ldi	r26, 0x00	; 0
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	eb e9       	ldi	r30, 0x9B	; 155
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	0c 94 16 02 	jmp	0x42c	; 0x42c <__prologue_saves__+0x14>
 336:	7c 01       	movw	r14, r24
 338:	eb 01       	movw	r28, r22
 33a:	8a 01       	movw	r16, r20
 33c:	69 01       	movw	r12, r18
 33e:	09 c0       	rjmp	.+18     	; 0x352 <__eerd_block+0x28>
 340:	ce 01       	movw	r24, r28
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	f6 01       	movw	r30, r12
 346:	09 95       	icall
 348:	f7 01       	movw	r30, r14
 34a:	81 93       	st	Z+, r24
 34c:	7f 01       	movw	r14, r30
 34e:	01 50       	subi	r16, 0x01	; 1
 350:	10 40       	sbci	r17, 0x00	; 0
 352:	01 15       	cp	r16, r1
 354:	11 05       	cpc	r17, r1
 356:	a1 f7       	brne	.-24     	; 0x340 <__eerd_block+0x16>
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	e8 e0       	ldi	r30, 0x08	; 8
 35e:	0c 94 32 02 	jmp	0x464	; 0x464 <__stack+0x5>

00000362 <__eerd_word>:
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	7b 01       	movw	r14, r22
 36e:	8c 01       	movw	r16, r24
 370:	fb 01       	movw	r30, r22
 372:	09 95       	icall
 374:	d8 2e       	mov	r13, r24
 376:	c8 01       	movw	r24, r16
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	f7 01       	movw	r30, r14
 37c:	09 95       	icall
 37e:	98 2f       	mov	r25, r24
 380:	8d 2d       	mov	r24, r13
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	08 95       	ret

0000038e <__eewr_block>:
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	ed ec       	ldi	r30, 0xCD	; 205
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	0c 94 16 02 	jmp	0x42c	; 0x42c <__prologue_saves__+0x14>
 39a:	ec 01       	movw	r28, r24
 39c:	7b 01       	movw	r14, r22
 39e:	8a 01       	movw	r16, r20
 3a0:	69 01       	movw	r12, r18
 3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <__eewr_block+0x28>
 3a4:	f7 01       	movw	r30, r14
 3a6:	61 91       	ld	r22, Z+
 3a8:	7f 01       	movw	r14, r30
 3aa:	ce 01       	movw	r24, r28
 3ac:	21 96       	adiw	r28, 0x01	; 1
 3ae:	f6 01       	movw	r30, r12
 3b0:	09 95       	icall
 3b2:	01 50       	subi	r16, 0x01	; 1
 3b4:	10 40       	sbci	r17, 0x00	; 0
 3b6:	01 15       	cp	r16, r1
 3b8:	11 05       	cpc	r17, r1
 3ba:	a1 f7       	brne	.-24     	; 0x3a4 <__eewr_block+0x16>
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	e8 e0       	ldi	r30, 0x08	; 8
 3c2:	0c 94 32 02 	jmp	0x464	; 0x464 <__stack+0x5>

000003c6 <__eewr_word>:
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	d7 2e       	mov	r13, r23
 3d2:	7a 01       	movw	r14, r20
 3d4:	8c 01       	movw	r16, r24
 3d6:	fa 01       	movw	r30, r20
 3d8:	09 95       	icall
 3da:	6d 2d       	mov	r22, r13
 3dc:	c8 01       	movw	r24, r16
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	f7 01       	movw	r30, r14
 3e2:	09 95       	icall
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	ef 90       	pop	r14
 3ec:	df 90       	pop	r13
 3ee:	08 95       	ret

000003f0 <__udivmodhi4>:
 3f0:	aa 1b       	sub	r26, r26
 3f2:	bb 1b       	sub	r27, r27
 3f4:	51 e1       	ldi	r21, 0x11	; 17
 3f6:	07 c0       	rjmp	.+14     	; 0x406 <__udivmodhi4_ep>

000003f8 <__udivmodhi4_loop>:
 3f8:	aa 1f       	adc	r26, r26
 3fa:	bb 1f       	adc	r27, r27
 3fc:	a6 17       	cp	r26, r22
 3fe:	b7 07       	cpc	r27, r23
 400:	10 f0       	brcs	.+4      	; 0x406 <__udivmodhi4_ep>
 402:	a6 1b       	sub	r26, r22
 404:	b7 0b       	sbc	r27, r23

00000406 <__udivmodhi4_ep>:
 406:	88 1f       	adc	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	5a 95       	dec	r21
 40c:	a9 f7       	brne	.-22     	; 0x3f8 <__udivmodhi4_loop>
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	bc 01       	movw	r22, r24
 414:	cd 01       	movw	r24, r26
 416:	08 95       	ret

00000418 <__prologue_saves__>:
 418:	2f 92       	push	r2
 41a:	3f 92       	push	r3
 41c:	4f 92       	push	r4
 41e:	5f 92       	push	r5
 420:	6f 92       	push	r6
 422:	7f 92       	push	r7
 424:	8f 92       	push	r8
 426:	9f 92       	push	r9
 428:	af 92       	push	r10
 42a:	bf 92       	push	r11
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	ca 1b       	sub	r28, r26
 442:	db 0b       	sbc	r29, r27
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	09 94       	ijmp

00000450 <__epilogue_restores__>:
 450:	2a 88       	ldd	r2, Y+18	; 0x12
 452:	39 88       	ldd	r3, Y+17	; 0x11
 454:	48 88       	ldd	r4, Y+16	; 0x10
 456:	5f 84       	ldd	r5, Y+15	; 0x0f
 458:	6e 84       	ldd	r6, Y+14	; 0x0e
 45a:	7d 84       	ldd	r7, Y+13	; 0x0d
 45c:	8c 84       	ldd	r8, Y+12	; 0x0c
 45e:	9b 84       	ldd	r9, Y+11	; 0x0b
 460:	aa 84       	ldd	r10, Y+10	; 0x0a
 462:	b9 84       	ldd	r11, Y+9	; 0x09
 464:	c8 84       	ldd	r12, Y+8	; 0x08
 466:	df 80       	ldd	r13, Y+7	; 0x07
 468:	ee 80       	ldd	r14, Y+6	; 0x06
 46a:	fd 80       	ldd	r15, Y+5	; 0x05
 46c:	0c 81       	ldd	r16, Y+4	; 0x04
 46e:	1b 81       	ldd	r17, Y+3	; 0x03
 470:	aa 81       	ldd	r26, Y+2	; 0x02
 472:	b9 81       	ldd	r27, Y+1	; 0x01
 474:	ce 0f       	add	r28, r30
 476:	d1 1d       	adc	r29, r1
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	ed 01       	movw	r28, r26
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
