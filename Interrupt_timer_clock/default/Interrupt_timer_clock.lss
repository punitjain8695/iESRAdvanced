
Interrupt_timer_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  000003cc  00000440  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ce  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000455  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000153  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ff  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014e  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001df  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  8a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3f e1       	ldi	r19, 0x1F	; 31
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:



void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 ea       	ldi	r22, 0xA0	; 160
 128:	e6 2e       	mov	r14, r22
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_number>:




void lcd_number(unsigned int no)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24

lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;

if (no==0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <lcd_number+0x34>
	lcd_data('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodhi4>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
	no=no/10;
 17c:	ce 01       	movw	r24, r28
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodhi4>
 186:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 188:	20 97       	sbiw	r28, 0x00	; 0
 18a:	81 f7       	brne	.-32     	; 0x16c <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_num>:



void lcd_num(unsigned int no)
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	8c 01       	movw	r16, r24
lcd_command(0x04);
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;
value=no%10;
lcd_data(48+value);
 1a4:	c8 01       	movw	r24, r16
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
value=no/10;
lcd_data(48+value);
 1b4:	c8 01       	movw	r24, r16
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodhi4>
 1be:	86 2f       	mov	r24, r22
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>

lcd_command(0x06);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <lcd_string_forward>:

void lcd_string_forward(unsigned char *str)
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	70 ea       	ldi	r23, 0xA0	; 160
 1e2:	e7 2e       	mov	r14, r23
 1e4:	7f e0       	ldi	r23, 0x0F	; 15
 1e6:	f7 2e       	mov	r15, r23
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <lcd_string_forward+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 1ea:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 1ee:	1f 5f       	subi	r17, 0xFF	; 255
 1f0:	c7 01       	movw	r24, r14
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_string_forward+0x20>

void lcd_string_forward(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 1f6:	fe 01       	movw	r30, r28
 1f8:	e1 0f       	add	r30, r17
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	a1 f7       	brne	.-24     	; 0x1ea <lcd_string_forward+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <main>:
#include<avr/lcd.h>
int x=0,sec=0,min=0,hr=0;
//Interrupt

main()
{
 20e:	1f 93       	push	r17
DDRA=0;
 210:	1a ba       	out	0x1a, r1	; 26
DDRB=255;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	87 bb       	out	0x17, r24	; 23
DDRD=0;
 216:	11 ba       	out	0x11, r1	; 17
PORTD=0xff;
 218:	82 bb       	out	0x12, r24	; 18
TCCR0=(1<<CS01);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	83 bf       	out	0x33, r24	; 51
TCNT0=0;
 21e:	12 be       	out	0x32, r1	; 50
TIMSK=(1<<TOIE0);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	89 bf       	out	0x39, r24	; 57
sei();
 224:	78 94       	sei
DDRC=255;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	84 bb       	out	0x14, r24	; 20
lcd_init();
 22a:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
lcd_command(0x85);
 22e:	85 e8       	ldi	r24, 0x85	; 133
 230:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data(':');
 234:	8a e3       	ldi	r24, 0x3A	; 58
 236:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_command(0x8A);
 23a:	8a e8       	ldi	r24, 0x8A	; 138
 23c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data(':');
 240:	8a e3       	ldi	r24, 0x3A	; 58
 242:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_command(0x8E);
 246:	8e e8       	ldi	r24, 0x8E	; 142
 248:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data('S');
 24c:	83 e5       	ldi	r24, 0x53	; 83
 24e:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_command(0x89);
 252:	89 e8       	ldi	r24, 0x89	; 137
 254:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data('M');
 258:	8d e4       	ldi	r24, 0x4D	; 77
 25a:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_command(0x84);
 25e:	84 e8       	ldi	r24, 0x84	; 132
 260:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data('H');
 264:	88 e4       	ldi	r24, 0x48	; 72
 266:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>

//GICR=(1<<INT0);
//MCUCR=(1<<ISC01);
while(1)
{
PORTB=0xf0;
 26a:	10 ef       	ldi	r17, 0xF0	; 240
 26c:	18 bb       	out	0x18, r17	; 24
lcd_command(0x8C);
 26e:	8c e8       	ldi	r24, 0x8C	; 140
 270:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_num(sec);
 274:	80 91 62 00 	lds	r24, 0x0062
 278:	90 91 63 00 	lds	r25, 0x0063
 27c:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_num>
lcd_command(0x87);
 280:	87 e8       	ldi	r24, 0x87	; 135
 282:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(min);
 286:	80 91 64 00 	lds	r24, 0x0064
 28a:	90 91 65 00 	lds	r25, 0x0065
 28e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>
lcd_command(0x82);
 292:	82 e8       	ldi	r24, 0x82	; 130
 294:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(hr);
 298:	80 91 66 00 	lds	r24, 0x0066
 29c:	90 91 67 00 	lds	r25, 0x0067
 2a0:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>
 2a4:	e3 cf       	rjmp	.-58     	; 0x26c <main+0x5e>

000002a6 <__vector_9>:
}



ISR(TIMER0_OVF_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
x++;
 2bc:	80 91 60 00 	lds	r24, 0x0060
 2c0:	90 91 61 00 	lds	r25, 0x0061
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 61 00 	sts	0x0061, r25
 2ca:	80 93 60 00 	sts	0x0060, r24
if(x==7500)
 2ce:	8c 54       	subi	r24, 0x4C	; 76
 2d0:	9d 41       	sbci	r25, 0x1D	; 29
 2d2:	b9 f5       	brne	.+110    	; 0x342 <__vector_9+0x9c>
{
PORTB=~PORTB;
 2d4:	88 b3       	in	r24, 0x18	; 24
 2d6:	80 95       	com	r24
 2d8:	88 bb       	out	0x18, r24	; 24
 2da:	8e e5       	ldi	r24, 0x5E	; 94
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	20 e9       	ldi	r18, 0x90	; 144
 2e0:	31 e0       	ldi	r19, 0x01	; 1
 2e2:	f9 01       	movw	r30, r18
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <__vector_9+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__vector_9+0x3c>
_delay_ms(35);
x=0;
 2ec:	10 92 61 00 	sts	0x0061, r1
 2f0:	10 92 60 00 	sts	0x0060, r1

sec++;
 2f4:	80 91 62 00 	lds	r24, 0x0062
 2f8:	90 91 63 00 	lds	r25, 0x0063
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 63 00 	sts	0x0063, r25
 302:	80 93 62 00 	sts	0x0062, r24
if(sec==60)
 306:	cc 97       	sbiw	r24, 0x3c	; 60
 308:	e1 f4       	brne	.+56     	; 0x342 <__vector_9+0x9c>
{
sec=0;
 30a:	10 92 63 00 	sts	0x0063, r1
 30e:	10 92 62 00 	sts	0x0062, r1
min++;
 312:	80 91 64 00 	lds	r24, 0x0064
 316:	90 91 65 00 	lds	r25, 0x0065
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	90 93 65 00 	sts	0x0065, r25
 320:	80 93 64 00 	sts	0x0064, r24
if(min==60)
 324:	cc 97       	sbiw	r24, 0x3c	; 60
 326:	69 f4       	brne	.+26     	; 0x342 <__vector_9+0x9c>
{
min=0;
 328:	10 92 65 00 	sts	0x0065, r1
 32c:	10 92 64 00 	sts	0x0064, r1
hr++;
 330:	80 91 66 00 	lds	r24, 0x0066
 334:	90 91 67 00 	lds	r25, 0x0067
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	90 93 67 00 	sts	0x0067, r25
 33e:	80 93 66 00 	sts	0x0066, r24
}
}
}

}
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <lcd_string_back>:

void lcd_string_back(unsigned char *str)
{
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
char d=strlen(str)-1;
 364:	dc 01       	movw	r26, r24
 366:	0d 90       	ld	r0, X+
 368:	00 20       	and	r0, r0
 36a:	e9 f7       	brne	.-6      	; 0x366 <lcd_string_back+0xe>
 36c:	1a 2f       	mov	r17, r26
 36e:	18 1b       	sub	r17, r24
 370:	12 50       	subi	r17, 0x02	; 2
 372:	e0 ea       	ldi	r30, 0xA0	; 160
 374:	ee 2e       	mov	r14, r30
 376:	ef e0       	ldi	r30, 0x0F	; 15
 378:	fe 2e       	mov	r15, r30
 37a:	0a c0       	rjmp	.+20     	; 0x390 <lcd_string_back+0x38>

while(d>0)
{
lcd_data(str[d]);
 37c:	fe 01       	movw	r30, r28
 37e:	e1 0f       	add	r30, r17
 380:	f1 1d       	adc	r31, r1
 382:	80 81       	ld	r24, Z
 384:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d--;
 388:	11 50       	subi	r17, 0x01	; 1
 38a:	c7 01       	movw	r24, r14
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_string_back+0x34>

void lcd_string_back(unsigned char *str)
{
char d=strlen(str)-1;

while(d>0)
 390:	11 23       	and	r17, r17
 392:	a1 f7       	brne	.-24     	; 0x37c <lcd_string_back+0x24>
{
lcd_data(str[d]);
d--;
_delay_ms(1);
}
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	08 95       	ret

000003a0 <__udivmodhi4>:
 3a0:	aa 1b       	sub	r26, r26
 3a2:	bb 1b       	sub	r27, r27
 3a4:	51 e1       	ldi	r21, 0x11	; 17
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <__udivmodhi4_ep>

000003a8 <__udivmodhi4_loop>:
 3a8:	aa 1f       	adc	r26, r26
 3aa:	bb 1f       	adc	r27, r27
 3ac:	a6 17       	cp	r26, r22
 3ae:	b7 07       	cpc	r27, r23
 3b0:	10 f0       	brcs	.+4      	; 0x3b6 <__udivmodhi4_ep>
 3b2:	a6 1b       	sub	r26, r22
 3b4:	b7 0b       	sbc	r27, r23

000003b6 <__udivmodhi4_ep>:
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	5a 95       	dec	r21
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <__udivmodhi4_loop>
 3be:	80 95       	com	r24
 3c0:	90 95       	com	r25
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
