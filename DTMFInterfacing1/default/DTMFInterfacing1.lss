
DTMFInterfacing1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000101  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009b  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f4  00000000  00000000  00000341  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d7  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  0000062f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 16000000UL
#include<util/delay.h>

void main()
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
DDRB=255;
DDRA=0;
  96:	1a ba       	out	0x1a, r1	; 26
PORTB=0;
  98:	18 ba       	out	0x18, r1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	9c e9       	ldi	r25, 0x9C	; 156
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0xc>
_delay_ms(10);
while(1)
{
if((PINA&0x0f)==0x02)
{
PORTB=0b00000101;
  a2:	e5 e0       	ldi	r30, 0x05	; 5
}

if((PINA&0x0f)==0x04)
{
PORTB=0b00000110;
  a4:	76 e0       	ldi	r23, 0x06	; 6
}

if((PINA&0x0f)==0x06)
{
PORTB=0b00001001;
  a6:	69 e0       	ldi	r22, 0x09	; 9
}

if((PINA&0x0f)==0x08)
{
PORTB=0b00001010;
  a8:	5a e0       	ldi	r21, 0x0A	; 10
PORTB=0b00000000;
}

if((PINA&0x0f)==0x01)
{
PORTB=0b00000100;
  aa:	44 e0       	ldi	r20, 0x04	; 4
}

if((PINA&0x0f)==0x03)
{
PORTB=0b00000001;
  ac:	31 e0       	ldi	r19, 0x01	; 1
}

if((PINA&0x0f)==0x07)
{
PORTB=0b00001000;
  ae:	28 e0       	ldi	r18, 0x08	; 8
}

if((PINA&0x0f)==0x09)
{
PORTB=0b00000010;
  b0:	92 e0       	ldi	r25, 0x02	; 2
DDRA=0;
PORTB=0;
_delay_ms(10);
while(1)
{
if((PINA&0x0f)==0x02)
  b2:	89 b3       	in	r24, 0x19	; 25
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	09 f4       	brne	.+2      	; 0xbc <main+0x2a>
{
PORTB=0b00000101;
  ba:	e8 bb       	out	0x18, r30	; 24
}

if((PINA&0x0f)==0x04)
  bc:	89 b3       	in	r24, 0x19	; 25
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	09 f4       	brne	.+2      	; 0xc6 <main+0x34>
{
PORTB=0b00000110;
  c4:	78 bb       	out	0x18, r23	; 24
}

if((PINA&0x0f)==0x06)
  c6:	89 b3       	in	r24, 0x19	; 25
  c8:	8f 70       	andi	r24, 0x0F	; 15
  ca:	86 30       	cpi	r24, 0x06	; 6
  cc:	09 f4       	brne	.+2      	; 0xd0 <main+0x3e>
{
PORTB=0b00001001;
  ce:	68 bb       	out	0x18, r22	; 24
}

if((PINA&0x0f)==0x08)
  d0:	89 b3       	in	r24, 0x19	; 25
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	09 f4       	brne	.+2      	; 0xda <main+0x48>
{
PORTB=0b00001010;
  d8:	58 bb       	out	0x18, r21	; 24
}

if((PINA&0x0f)==0x05)
  da:	89 b3       	in	r24, 0x19	; 25
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	85 30       	cpi	r24, 0x05	; 5
  e0:	09 f4       	brne	.+2      	; 0xe4 <main+0x52>
{
PORTB=0b00000000;
  e2:	18 ba       	out	0x18, r1	; 24
}

if((PINA&0x0f)==0x01)
  e4:	89 b3       	in	r24, 0x19	; 25
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	09 f4       	brne	.+2      	; 0xee <main+0x5c>
{
PORTB=0b00000100;
  ec:	48 bb       	out	0x18, r20	; 24
}

if((PINA&0x0f)==0x03)
  ee:	89 b3       	in	r24, 0x19	; 25
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	09 f4       	brne	.+2      	; 0xf8 <main+0x66>
{
PORTB=0b00000001;
  f6:	38 bb       	out	0x18, r19	; 24
}

if((PINA&0x0f)==0x07)
  f8:	89 b3       	in	r24, 0x19	; 25
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	87 30       	cpi	r24, 0x07	; 7
  fe:	09 f4       	brne	.+2      	; 0x102 <main+0x70>
{
PORTB=0b00001000;
 100:	28 bb       	out	0x18, r18	; 24
}

if((PINA&0x0f)==0x09)
 102:	89 b3       	in	r24, 0x19	; 25
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	89 30       	cpi	r24, 0x09	; 9
 108:	11 f4       	brne	.+4      	; 0x10e <main+0x7c>
{
PORTB=0b00000010;
 10a:	98 bb       	out	0x18, r25	; 24
 10c:	d2 cf       	rjmp	.-92     	; 0xb2 <main+0x20>
}

else
{
PORTB=0;
 10e:	18 ba       	out	0x18, r1	; 24
 110:	d0 cf       	rjmp	.-96     	; 0xb2 <main+0x20>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
