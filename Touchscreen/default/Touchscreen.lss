
Touchscreen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  0000034c  000003c0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bc  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004f1  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cd  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000543  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000141  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000242  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000198  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8a:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3f e1       	ldi	r19, 0x1F	; 31
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:



void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 ea       	ldi	r22, 0xA0	; 160
 128:	e6 2e       	mov	r14, r22
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_number>:




void lcd_number(unsigned int no)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24

lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;

if (no==0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <lcd_number+0x34>
	lcd_data('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 90 01 	call	0x320	; 0x320 <__udivmodhi4>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
	no=no/10;
 17c:	ce 01       	movw	r24, r28
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 90 01 	call	0x320	; 0x320 <__udivmodhi4>
 186:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 188:	20 97       	sbiw	r28, 0x00	; 0
 18a:	81 f7       	brne	.-32     	; 0x16c <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_num>:



void lcd_num(unsigned int no)
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	8c 01       	movw	r16, r24
lcd_command(0x04);
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;
value=no%10;
lcd_data(48+value);
 1a4:	c8 01       	movw	r24, r16
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 90 01 	call	0x320	; 0x320 <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
value=no/10;
lcd_data(48+value);
 1b4:	c8 01       	movw	r24, r16
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 90 01 	call	0x320	; 0x320 <__udivmodhi4>
 1be:	86 2f       	mov	r24, r22
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>

lcd_command(0x06);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <lcd_string_forward>:

void lcd_string_forward(unsigned char *str)
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	70 ea       	ldi	r23, 0xA0	; 160
 1e2:	e7 2e       	mov	r14, r23
 1e4:	7f e0       	ldi	r23, 0x0F	; 15
 1e6:	f7 2e       	mov	r15, r23
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <lcd_string_forward+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 1ea:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 1ee:	1f 5f       	subi	r17, 0xFF	; 255
 1f0:	c7 01       	movw	r24, r14
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_string_forward+0x20>

void lcd_string_forward(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 1f6:	fe 01       	movw	r30, r28
 1f8:	e1 0f       	add	r30, r17
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	a1 f7       	brne	.-24     	; 0x1ea <lcd_string_forward+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <adc_init>:

void adc_init()
{
 20e:	80 e4       	ldi	r24, 0x40	; 64
 210:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 212:	87 e8       	ldi	r24, 0x87	; 135
 214:	86 b9       	out	0x06, r24	; 6
}
 216:	08 95       	ret

00000218 <adc_read>:

unsigned int adc_read(char ch)
{
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|ch;
ADCSRA|=(1<<ADSC);
 21c:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 21e:	34 9b       	sbis	0x06, 4	; 6
 220:	fe cf       	rjmp	.-4      	; 0x21e <adc_read+0x6>
ADCSRA|=(1<<ADIF);
 222:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 224:	24 b1       	in	r18, 0x04	; 4
 226:	35 b1       	in	r19, 0x05	; 5
 228:	c9 01       	movw	r24, r18
 22a:	08 95       	ret

0000022c <main>:
#include<util/delay.h>
#include<avr/lcd.h>
#include<avr/adc.h>

main()
{
 22c:	6f 92       	push	r6
 22e:	7f 92       	push	r7
 230:	8f 92       	push	r8
 232:	9f 92       	push	r9
 234:	af 92       	push	r10
 236:	bf 92       	push	r11
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29

DDRC=255;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	84 bb       	out	0x14, r24	; 20
lcd_init();
 24c:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>

void adc_init()
{
ADMUX=(1<<REFS0);
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 254:	87 e8       	ldi	r24, 0x87	; 135
 256:	86 b9       	out	0x06, r24	; 6
adc_init();
int x=0,y=0;
while(1)
{
DDRA=0b00000101;
 258:	95 e0       	ldi	r25, 0x05	; 5
 25a:	69 2e       	mov	r6, r25
PORTA=0b00000100;
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	78 2e       	mov	r7, r24
 260:	00 e4       	ldi	r16, 0x40	; 64
 262:	e0 2e       	mov	r14, r16
 264:	0c e9       	ldi	r16, 0x9C	; 156
 266:	f0 2e       	mov	r15, r16
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 268:	13 e4       	ldi	r17, 0x43	; 67
 26a:	81 2e       	mov	r8, r17
_delay_ms(10);
x=adc_read(3);

DDRA=0b00001010;
 26c:	ba e0       	ldi	r27, 0x0A	; 10
 26e:	9b 2e       	mov	r9, r27
PORTA=0b00001000;
 270:	a8 e0       	ldi	r26, 0x08	; 8
 272:	aa 2e       	mov	r10, r26
 274:	f2 e4       	ldi	r31, 0x42	; 66
 276:	bf 2e       	mov	r11, r31
 278:	e0 e9       	ldi	r30, 0x90	; 144
 27a:	ce 2e       	mov	r12, r30
 27c:	e1 e0       	ldi	r30, 0x01	; 1
 27e:	de 2e       	mov	r13, r30
lcd_init();
adc_init();
int x=0,y=0;
while(1)
{
DDRA=0b00000101;
 280:	6a ba       	out	0x1a, r6	; 26
PORTA=0b00000100;
 282:	7b ba       	out	0x1b, r7	; 27
 284:	c7 01       	movw	r24, r14
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x5a>
 28a:	87 b8       	out	0x07, r8	; 7
ADCSRA|=(1<<ADSC);
 28c:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 28e:	34 9b       	sbis	0x06, 4	; 6
 290:	fe cf       	rjmp	.-4      	; 0x28e <main+0x62>
ADCSRA|=(1<<ADIF);
 292:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 294:	c4 b1       	in	r28, 0x04	; 4
 296:	d5 b1       	in	r29, 0x05	; 5
_delay_ms(10);
x=adc_read(3);

DDRA=0b00001010;
 298:	9a ba       	out	0x1a, r9	; 26
PORTA=0b00001000;
 29a:	ab ba       	out	0x1b, r10	; 27
 29c:	c7 01       	movw	r24, r14
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x72>
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 2a2:	b7 b8       	out	0x07, r11	; 7
ADCSRA|=(1<<ADSC);
 2a4:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 2a6:	34 9b       	sbis	0x06, 4	; 6
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <main+0x7a>
ADCSRA|=(1<<ADIF);
 2aa:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 2ac:	04 b1       	in	r16, 0x04	; 4
 2ae:	15 b1       	in	r17, 0x05	; 5
_delay_ms(10);
y=adc_read(2);

lcd_command(0x8f);
 2b0:	8f e8       	ldi	r24, 0x8F	; 143
 2b2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(x);
 2b6:	ce 01       	movw	r24, r28
 2b8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>

lcd_command(0xcf);
 2bc:	8f ec       	ldi	r24, 0xCF	; 207
 2be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(y);
 2c2:	c8 01       	movw	r24, r16
 2c4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>
 2c8:	88 ee       	ldi	r24, 0xE8	; 232
 2ca:	93 e0       	ldi	r25, 0x03	; 3
 2cc:	f6 01       	movw	r30, r12
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0xa2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d4:	d9 f7       	brne	.-10     	; 0x2cc <main+0xa0>
 2d6:	d4 cf       	rjmp	.-88     	; 0x280 <main+0x54>

000002d8 <lcd_string_back>:

void lcd_string_back(unsigned char *str)
{
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
char d=strlen(str)-1;
 2e4:	dc 01       	movw	r26, r24
 2e6:	0d 90       	ld	r0, X+
 2e8:	00 20       	and	r0, r0
 2ea:	e9 f7       	brne	.-6      	; 0x2e6 <lcd_string_back+0xe>
 2ec:	1a 2f       	mov	r17, r26
 2ee:	18 1b       	sub	r17, r24
 2f0:	12 50       	subi	r17, 0x02	; 2
 2f2:	20 ea       	ldi	r18, 0xA0	; 160
 2f4:	e2 2e       	mov	r14, r18
 2f6:	2f e0       	ldi	r18, 0x0F	; 15
 2f8:	f2 2e       	mov	r15, r18
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <lcd_string_back+0x38>

while(d>0)
{
lcd_data(str[d]);
 2fc:	fe 01       	movw	r30, r28
 2fe:	e1 0f       	add	r30, r17
 300:	f1 1d       	adc	r31, r1
 302:	80 81       	ld	r24, Z
 304:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d--;
 308:	11 50       	subi	r17, 0x01	; 1
 30a:	c7 01       	movw	r24, r14
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_string_back+0x34>

void lcd_string_back(unsigned char *str)
{
char d=strlen(str)-1;

while(d>0)
 310:	11 23       	and	r17, r17
 312:	a1 f7       	brne	.-24     	; 0x2fc <lcd_string_back+0x24>
{
lcd_data(str[d]);
d--;
_delay_ms(1);
}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	08 95       	ret

00000320 <__udivmodhi4>:
 320:	aa 1b       	sub	r26, r26
 322:	bb 1b       	sub	r27, r27
 324:	51 e1       	ldi	r21, 0x11	; 17
 326:	07 c0       	rjmp	.+14     	; 0x336 <__udivmodhi4_ep>

00000328 <__udivmodhi4_loop>:
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	a6 17       	cp	r26, r22
 32e:	b7 07       	cpc	r27, r23
 330:	10 f0       	brcs	.+4      	; 0x336 <__udivmodhi4_ep>
 332:	a6 1b       	sub	r26, r22
 334:	b7 0b       	sbc	r27, r23

00000336 <__udivmodhi4_ep>:
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	5a 95       	dec	r21
 33c:	a9 f7       	brne	.-22     	; 0x328 <__udivmodhi4_loop>
 33e:	80 95       	com	r24
 340:	90 95       	com	r25
 342:	bc 01       	movw	r22, r24
 344:	cd 01       	movw	r24, r26
 346:	08 95       	ret

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
