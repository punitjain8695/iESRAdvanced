
USART_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00000234  000002a8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000094  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ef  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d7  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000040a  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000120  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000154  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3f e1       	ldi	r19, 0x1F	; 31
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:



void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 ea       	ldi	r22, 0xA0	; 160
 128:	e6 2e       	mov	r14, r22
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_number>:




void lcd_number(unsigned int no)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24

lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;

if (no==0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <lcd_number+0x34>
	lcd_data('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
	no=no/10;
 17c:	ce 01       	movw	r24, r28
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodhi4>
 186:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 188:	20 97       	sbiw	r28, 0x00	; 0
 18a:	81 f7       	brne	.-32     	; 0x16c <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <usart_init>:
#define UBRR ((F_CPU/(16UL*baud)) -1)
#include<avr/interrupt.h>


usart_init()
{
 198:	87 e6       	ldi	r24, 0x67	; 103
 19a:	89 b9       	out	0x09, r24	; 9
UBRRL=UBRR;
UBRRH=(UBRR>>8);
 19c:	10 bc       	out	0x20, r1	; 32
UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 19e:	88 e9       	ldi	r24, 0x98	; 152
 1a0:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 1a2:	86 e8       	ldi	r24, 0x86	; 134
 1a4:	80 bd       	out	0x20, r24	; 32
}
 1a6:	08 95       	ret

000001a8 <usart_tx>:

usart_tx(char data)
{
 1a8:	5d 9b       	sbis	0x0b, 5	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <usart_tx>
while((UCSRA&0b00100000)==0);
UDR=data;
 1ac:	8c b9       	out	0x0c, r24	; 12
}
 1ae:	08 95       	ret

000001b0 <usart_rx>:

char usart_rx()
{
 1b0:	5f 9b       	sbis	0x0b, 7	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <usart_rx>
while((UCSRA&0b10000000)==0);
return UDR;
 1b4:	8c b1       	in	r24, 0x0c	; 12
}
 1b6:	08 95       	ret

000001b8 <main>:

void main()
{
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	84 bb       	out	0x14, r24	; 20
DDRC=255;
DDRB=255;
 1bc:	87 bb       	out	0x17, r24	; 23
lcd_init();
 1be:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
sei();
 1c2:	78 94       	sei
lcd_command(0x80);
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
#include<avr/interrupt.h>


usart_init()
{
UBRRL=UBRR;
 1ca:	87 e6       	ldi	r24, 0x67	; 103
 1cc:	89 b9       	out	0x09, r24	; 9
UBRRH=(UBRR>>8);
 1ce:	10 bc       	out	0x20, r1	; 32
UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 1d0:	88 e9       	ldi	r24, 0x98	; 152
 1d2:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 1d4:	86 e8       	ldi	r24, 0x86	; 134
 1d6:	80 bd       	out	0x20, r24	; 32
 1d8:	40 e9       	ldi	r20, 0x90	; 144
 1da:	51 e0       	ldi	r21, 0x01	; 1
usart_tx(i);
//lcd_data('A');


_delay_ms(1000);
PORTB=255;
 1dc:	3f ef       	ldi	r19, 0xFF	; 255
//lcd_data('A');
usart_init();
char i;
while(1)
{
i++;
 1de:	2f 5f       	subi	r18, 0xFF	; 255
UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

usart_tx(char data)
{
while((UCSRA&0b00100000)==0);
 1e0:	5d 9b       	sbis	0x0b, 5	; 11
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <main+0x28>
UDR=data;
 1e4:	2c b9       	out	0x0c, r18	; 12
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	97 e2       	ldi	r25, 0x27	; 39
 1ea:	fa 01       	movw	r30, r20
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	d9 f7       	brne	.-10     	; 0x1ea <main+0x32>
usart_tx(i);
//lcd_data('A');


_delay_ms(1000);
PORTB=255;
 1f4:	38 bb       	out	0x18, r19	; 24
 1f6:	88 ec       	ldi	r24, 0xC8	; 200
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	fa 01       	movw	r30, r20
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 202:	d9 f7       	brne	.-10     	; 0x1fa <main+0x42>
_delay_ms(20);
PORTB=0;
 204:	18 ba       	out	0x18, r1	; 24
 206:	eb cf       	rjmp	.-42     	; 0x1de <main+0x26>

00000208 <__udivmodhi4>:
 208:	aa 1b       	sub	r26, r26
 20a:	bb 1b       	sub	r27, r27
 20c:	51 e1       	ldi	r21, 0x11	; 17
 20e:	07 c0       	rjmp	.+14     	; 0x21e <__udivmodhi4_ep>

00000210 <__udivmodhi4_loop>:
 210:	aa 1f       	adc	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	a6 17       	cp	r26, r22
 216:	b7 07       	cpc	r27, r23
 218:	10 f0       	brcs	.+4      	; 0x21e <__udivmodhi4_ep>
 21a:	a6 1b       	sub	r26, r22
 21c:	b7 0b       	sbc	r27, r23

0000021e <__udivmodhi4_ep>:
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	5a 95       	dec	r21
 224:	a9 f7       	brne	.-22     	; 0x210 <__udivmodhi4_loop>
 226:	80 95       	com	r24
 228:	90 95       	com	r25
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
