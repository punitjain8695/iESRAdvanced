
Relay_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000105  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009d  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019e  00000000  00000000  00000337  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cc  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000088  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 16000000UL
#include<util/delay.h>

main()
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
DDRB=255;
DDRD=0xf0;
  96:	80 ef       	ldi	r24, 0xF0	; 240
  98:	81 bb       	out	0x11, r24	; 17
PORTB=0;
  9a:	18 ba       	out	0x18, r1	; 24
PORTD=0xef;
  9c:	8f ee       	ldi	r24, 0xEF	; 239
  9e:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	9c e9       	ldi	r25, 0x9C	; 156
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x12>
_delay_ms(10);

while(1)
{

if((PIND&0x01)==0)
  a8:	80 99       	sbic	0x10, 0	; 16
  aa:	08 c0       	rjmp	.+16     	; 0xbc <main+0x2a>
{
while((PIND&0x01)==0);
  ac:	80 9b       	sbis	0x10, 0	; 16
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x1a>
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <main+0x22>
while((PIND&0x0f)==0x0f)
{
PORTB|=0x01;
  b2:	c0 9a       	sbi	0x18, 0	; 24
{

if((PIND&0x01)==0)
{
while((PIND&0x01)==0);
while((PIND&0x0f)==0x0f)
  b4:	80 b3       	in	r24, 0x10	; 16
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	8f 30       	cpi	r24, 0x0F	; 15
  ba:	d9 f3       	breq	.-10     	; 0xb2 <main+0x20>
{
PORTB|=0x01;
}
}

if((PIND&0x02)==0)
  bc:	81 99       	sbic	0x10, 1	; 16
  be:	0a c0       	rjmp	.+20     	; 0xd4 <main+0x42>
{
while((PIND&0x02)==0);
  c0:	81 9b       	sbis	0x10, 1	; 16
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x2e>
  c4:	03 c0       	rjmp	.+6      	; 0xcc <main+0x3a>
while((PIND&0x0f)==0x0f)
{
PORTB&=0x02;
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	82 70       	andi	r24, 0x02	; 2
  ca:	88 bb       	out	0x18, r24	; 24
}

if((PIND&0x02)==0)
{
while((PIND&0x02)==0);
while((PIND&0x0f)==0x0f)
  cc:	80 b3       	in	r24, 0x10	; 16
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8f 30       	cpi	r24, 0x0F	; 15
  d2:	c9 f3       	breq	.-14     	; 0xc6 <main+0x34>
{
PORTB&=0x02;
}
}

if((PIND&0x04)==0)
  d4:	82 99       	sbic	0x10, 2	; 16
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <main+0x56>
{
while((PIND&0x04)==0);
  d8:	82 9b       	sbis	0x10, 2	; 16
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x46>
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <main+0x4e>
while((PIND&0x0f)==0x0f)
{
PORTB|=0x02;
  de:	c1 9a       	sbi	0x18, 1	; 24
}

if((PIND&0x04)==0)
{
while((PIND&0x04)==0);
while((PIND&0x0f)==0x0f)
  e0:	80 b3       	in	r24, 0x10	; 16
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	8f 30       	cpi	r24, 0x0F	; 15
  e6:	d9 f3       	breq	.-10     	; 0xde <main+0x4c>
{
PORTB|=0x02;
}
}
if((PIND&0x08)==0)
  e8:	83 99       	sbic	0x10, 3	; 16
  ea:	de cf       	rjmp	.-68     	; 0xa8 <main+0x16>
{
while((PIND&0x08)==0);
  ec:	83 9b       	sbis	0x10, 3	; 16
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x5a>
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <main+0x66>
while((PIND&0x0f)==0x0f)
{
PORTB&=0x01;
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	88 bb       	out	0x18, r24	; 24
}
}
if((PIND&0x08)==0)
{
while((PIND&0x08)==0);
while((PIND&0x0f)==0x0f)
  f8:	80 b3       	in	r24, 0x10	; 16
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	8f 30       	cpi	r24, 0x0F	; 15
  fe:	a1 f6       	brne	.-88     	; 0xa8 <main+0x16>
 100:	f8 cf       	rjmp	.-16     	; 0xf2 <main+0x60>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
