
TouchscreenBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  000003ca  0000043e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bc  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004f1  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cd  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005aa  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000147  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000232  00000000  00000000  0000138b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000198  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8a:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3f e1       	ldi	r19, 0x1F	; 31
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:



void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 ea       	ldi	r22, 0xA0	; 160
 128:	e6 2e       	mov	r14, r22
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_number>:




void lcd_number(unsigned int no)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24

lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;

if (no==0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <lcd_number+0x34>
	lcd_data('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 cf 01 	call	0x39e	; 0x39e <__udivmodhi4>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
	no=no/10;
 17c:	ce 01       	movw	r24, r28
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 cf 01 	call	0x39e	; 0x39e <__udivmodhi4>
 186:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 188:	20 97       	sbiw	r28, 0x00	; 0
 18a:	81 f7       	brne	.-32     	; 0x16c <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_num>:



void lcd_num(unsigned int no)
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	8c 01       	movw	r16, r24
lcd_command(0x04);
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;
value=no%10;
lcd_data(48+value);
 1a4:	c8 01       	movw	r24, r16
 1a6:	6a e0       	ldi	r22, 0x0A	; 10
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 cf 01 	call	0x39e	; 0x39e <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
value=no/10;
lcd_data(48+value);
 1b4:	c8 01       	movw	r24, r16
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 cf 01 	call	0x39e	; 0x39e <__udivmodhi4>
 1be:	86 2f       	mov	r24, r22
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>

lcd_command(0x06);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <lcd_string_forward>:

void lcd_string_forward(unsigned char *str)
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	70 ea       	ldi	r23, 0xA0	; 160
 1e2:	e7 2e       	mov	r14, r23
 1e4:	7f e0       	ldi	r23, 0x0F	; 15
 1e6:	f7 2e       	mov	r15, r23
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <lcd_string_forward+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 1ea:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 1ee:	1f 5f       	subi	r17, 0xFF	; 255
 1f0:	c7 01       	movw	r24, r14
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_string_forward+0x20>

void lcd_string_forward(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 1f6:	fe 01       	movw	r30, r28
 1f8:	e1 0f       	add	r30, r17
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	a1 f7       	brne	.-24     	; 0x1ea <lcd_string_forward+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	08 95       	ret

0000020e <adc_init>:

void adc_init()
{
 20e:	80 e4       	ldi	r24, 0x40	; 64
 210:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 212:	87 e8       	ldi	r24, 0x87	; 135
 214:	86 b9       	out	0x06, r24	; 6
}
 216:	08 95       	ret

00000218 <adc_read>:

unsigned int adc_read(char ch)
{
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|ch;
ADCSRA|=(1<<ADSC);
 21c:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 21e:	34 9b       	sbis	0x06, 4	; 6
 220:	fe cf       	rjmp	.-4      	; 0x21e <adc_read+0x6>
ADCSRA|=(1<<ADIF);
 222:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 224:	24 b1       	in	r18, 0x04	; 4
 226:	35 b1       	in	r19, 0x05	; 5
 228:	c9 01       	movw	r24, r18
 22a:	08 95       	ret

0000022c <main>:
#include<util/delay.h>
#include<avr/lcd.h>
#include<avr/adc.h>

main()
{
 22c:	5f 92       	push	r5
 22e:	6f 92       	push	r6
 230:	7f 92       	push	r7
 232:	8f 92       	push	r8
 234:	9f 92       	push	r9
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
DDRB=255;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	87 bb       	out	0x17, r24	; 23
DDRC=255;
 24e:	84 bb       	out	0x14, r24	; 20
lcd_init();
 250:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>

void adc_init()
{
ADMUX=(1<<REFS0);
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 258:	87 e8       	ldi	r24, 0x87	; 135
 25a:	86 b9       	out	0x06, r24	; 6
adc_init();
int x=0,y=0;
while(1)
{
DDRA=0b00000101;
 25c:	95 e0       	ldi	r25, 0x05	; 5
 25e:	99 2e       	mov	r9, r25
PORTA=0b00000100;
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	a8 2e       	mov	r10, r24
 264:	00 e4       	ldi	r16, 0x40	; 64
 266:	e0 2e       	mov	r14, r16
 268:	0c e9       	ldi	r16, 0x9C	; 156
 26a:	f0 2e       	mov	r15, r16
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 26c:	13 e4       	ldi	r17, 0x43	; 67
 26e:	51 2e       	mov	r5, r17
_delay_ms(10);
x=adc_read(3);

DDRA=0b00001010;
 270:	ba e0       	ldi	r27, 0x0A	; 10
 272:	bb 2e       	mov	r11, r27
PORTA=0b00001000;
 274:	a8 e0       	ldi	r26, 0x08	; 8
 276:	6a 2e       	mov	r6, r26
 278:	f2 e4       	ldi	r31, 0x42	; 66
 27a:	7f 2e       	mov	r7, r31
 27c:	e0 e9       	ldi	r30, 0x90	; 144
 27e:	ce 2e       	mov	r12, r30
 280:	e1 e0       	ldi	r30, 0x01	; 1
 282:	de 2e       	mov	r13, r30
PORTB=0b00001010;
}

if((x>500&&x<700)&&(y>100&&y<300))
{
PORTB=0b00000001;
 284:	88 24       	eor	r8, r8
 286:	83 94       	inc	r8
lcd_init();
adc_init();
int x=0,y=0;
while(1)
{
DDRA=0b00000101;
 288:	9a ba       	out	0x1a, r9	; 26
PORTA=0b00000100;
 28a:	ab ba       	out	0x1b, r10	; 27
 28c:	c7 01       	movw	r24, r14
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x62>
 292:	57 b8       	out	0x07, r5	; 7
ADCSRA|=(1<<ADSC);
 294:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 296:	34 9b       	sbis	0x06, 4	; 6
 298:	fe cf       	rjmp	.-4      	; 0x296 <main+0x6a>
ADCSRA|=(1<<ADIF);
 29a:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 29c:	04 b1       	in	r16, 0x04	; 4
 29e:	15 b1       	in	r17, 0x05	; 5
_delay_ms(10);
x=adc_read(3);

DDRA=0b00001010;
 2a0:	ba ba       	out	0x1a, r11	; 26
PORTA=0b00001000;
 2a2:	6b ba       	out	0x1b, r6	; 27
 2a4:	c7 01       	movw	r24, r14
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x7a>
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 2aa:	77 b8       	out	0x07, r7	; 7
ADCSRA|=(1<<ADSC);
 2ac:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 2ae:	34 9b       	sbis	0x06, 4	; 6
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <main+0x82>
ADCSRA|=(1<<ADIF);
 2b2:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 2b4:	c4 b1       	in	r28, 0x04	; 4
 2b6:	d5 b1       	in	r29, 0x05	; 5
_delay_ms(10);
y=adc_read(2);

lcd_command(0x8f);
 2b8:	8f e8       	ldi	r24, 0x8F	; 143
 2ba:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(x);
 2be:	c8 01       	movw	r24, r16
 2c0:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>

lcd_command(0xcf);
 2c4:	8f ec       	ldi	r24, 0xCF	; 207
 2c6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(y);
 2ca:	ce 01       	movw	r24, r28
 2cc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>
 2d0:	88 ee       	ldi	r24, 0xE8	; 232
 2d2:	93 e0       	ldi	r25, 0x03	; 3
 2d4:	f6 01       	movw	r30, r12
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0xaa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2dc:	d9 f7       	brne	.-10     	; 0x2d4 <main+0xa8>
_delay_ms(100);

if((x>450&&x<550)&&(y>470&&y<570))
 2de:	c8 01       	movw	r24, r16
 2e0:	83 5c       	subi	r24, 0xC3	; 195
 2e2:	91 40       	sbci	r25, 0x01	; 1
 2e4:	83 36       	cpi	r24, 0x63	; 99
 2e6:	91 05       	cpc	r25, r1
 2e8:	38 f4       	brcc	.+14     	; 0x2f8 <main+0xcc>
 2ea:	ce 01       	movw	r24, r28
 2ec:	87 5d       	subi	r24, 0xD7	; 215
 2ee:	91 40       	sbci	r25, 0x01	; 1
 2f0:	83 36       	cpi	r24, 0x63	; 99
 2f2:	91 05       	cpc	r25, r1
 2f4:	08 f4       	brcc	.+2      	; 0x2f8 <main+0xcc>
{
PORTB=0;
 2f6:	18 ba       	out	0x18, r1	; 24
}

if((x>100&&x<300)&&(y>400&&y<550))
 2f8:	c8 01       	movw	r24, r16
 2fa:	85 56       	subi	r24, 0x65	; 101
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	87 3c       	cpi	r24, 0xC7	; 199
 300:	91 05       	cpc	r25, r1
 302:	38 f4       	brcc	.+14     	; 0x312 <main+0xe6>
 304:	ce 01       	movw	r24, r28
 306:	81 59       	subi	r24, 0x91	; 145
 308:	91 40       	sbci	r25, 0x01	; 1
 30a:	85 39       	cpi	r24, 0x95	; 149
 30c:	91 05       	cpc	r25, r1
 30e:	08 f4       	brcc	.+2      	; 0x312 <main+0xe6>
{
PORTB=0b00000101;
 310:	98 ba       	out	0x18, r9	; 24
}

if((x>800&&x<1000)&&(y>400&&y<550))
 312:	c8 01       	movw	r24, r16
 314:	81 52       	subi	r24, 0x21	; 33
 316:	93 40       	sbci	r25, 0x03	; 3
 318:	87 3c       	cpi	r24, 0xC7	; 199
 31a:	91 05       	cpc	r25, r1
 31c:	38 f4       	brcc	.+14     	; 0x32c <main+0x100>
 31e:	ce 01       	movw	r24, r28
 320:	81 59       	subi	r24, 0x91	; 145
 322:	91 40       	sbci	r25, 0x01	; 1
 324:	85 39       	cpi	r24, 0x95	; 149
 326:	91 05       	cpc	r25, r1
 328:	08 f4       	brcc	.+2      	; 0x32c <main+0x100>
{
PORTB=0b00001010;
 32a:	b8 ba       	out	0x18, r11	; 24
}

if((x>500&&x<700)&&(y>100&&y<300))
 32c:	05 5f       	subi	r16, 0xF5	; 245
 32e:	11 40       	sbci	r17, 0x01	; 1
 330:	07 3c       	cpi	r16, 0xC7	; 199
 332:	11 05       	cpc	r17, r1
 334:	08 f0       	brcs	.+2      	; 0x338 <main+0x10c>
 336:	a8 cf       	rjmp	.-176    	; 0x288 <main+0x5c>
 338:	ce 01       	movw	r24, r28
 33a:	85 56       	subi	r24, 0x65	; 101
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	87 3c       	cpi	r24, 0xC7	; 199
 340:	91 05       	cpc	r25, r1
 342:	08 f4       	brcc	.+2      	; 0x346 <main+0x11a>
{
PORTB=0b00000001;
 344:	88 ba       	out	0x18, r8	; 24
}

if((x>500&&x<700)&&(y>700&&y<900))
 346:	cd 5b       	subi	r28, 0xBD	; 189
 348:	d2 40       	sbci	r29, 0x02	; 2
 34a:	c7 3c       	cpi	r28, 0xC7	; 199
 34c:	d1 05       	cpc	r29, r1
 34e:	08 f0       	brcs	.+2      	; 0x352 <main+0x126>
 350:	9b cf       	rjmp	.-202    	; 0x288 <main+0x5c>
{
PORTB=0b00000100;
 352:	a8 ba       	out	0x18, r10	; 24
 354:	99 cf       	rjmp	.-206    	; 0x288 <main+0x5c>

00000356 <lcd_string_back>:

void lcd_string_back(unsigned char *str)
{
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
char d=strlen(str)-1;
 362:	dc 01       	movw	r26, r24
 364:	0d 90       	ld	r0, X+
 366:	00 20       	and	r0, r0
 368:	e9 f7       	brne	.-6      	; 0x364 <lcd_string_back+0xe>
 36a:	1a 2f       	mov	r17, r26
 36c:	18 1b       	sub	r17, r24
 36e:	12 50       	subi	r17, 0x02	; 2
 370:	20 ea       	ldi	r18, 0xA0	; 160
 372:	e2 2e       	mov	r14, r18
 374:	2f e0       	ldi	r18, 0x0F	; 15
 376:	f2 2e       	mov	r15, r18
 378:	0a c0       	rjmp	.+20     	; 0x38e <lcd_string_back+0x38>

while(d>0)
{
lcd_data(str[d]);
 37a:	fe 01       	movw	r30, r28
 37c:	e1 0f       	add	r30, r17
 37e:	f1 1d       	adc	r31, r1
 380:	80 81       	ld	r24, Z
 382:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d--;
 386:	11 50       	subi	r17, 0x01	; 1
 388:	c7 01       	movw	r24, r14
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_string_back+0x34>

void lcd_string_back(unsigned char *str)
{
char d=strlen(str)-1;

while(d>0)
 38e:	11 23       	and	r17, r17
 390:	a1 f7       	brne	.-24     	; 0x37a <lcd_string_back+0x24>
{
lcd_data(str[d]);
d--;
_delay_ms(1);
}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	08 95       	ret

0000039e <__udivmodhi4>:
 39e:	aa 1b       	sub	r26, r26
 3a0:	bb 1b       	sub	r27, r27
 3a2:	51 e1       	ldi	r21, 0x11	; 17
 3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <__udivmodhi4_ep>

000003a6 <__udivmodhi4_loop>:
 3a6:	aa 1f       	adc	r26, r26
 3a8:	bb 1f       	adc	r27, r27
 3aa:	a6 17       	cp	r26, r22
 3ac:	b7 07       	cpc	r27, r23
 3ae:	10 f0       	brcs	.+4      	; 0x3b4 <__udivmodhi4_ep>
 3b0:	a6 1b       	sub	r26, r22
 3b2:	b7 0b       	sbc	r27, r23

000003b4 <__udivmodhi4_ep>:
 3b4:	88 1f       	adc	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	5a 95       	dec	r21
 3ba:	a9 f7       	brne	.-22     	; 0x3a6 <__udivmodhi4_loop>
 3bc:	80 95       	com	r24
 3be:	90 95       	com	r25
 3c0:	bc 01       	movw	r22, r24
 3c2:	cd 01       	movw	r24, r26
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
